---
info:
  description: Hockey teams application
  title: Swagger
  version: 1.0.0
host: localhost:3000
basePath: "/api"
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization
    description: ''
swagger: '2.0'
paths:
  "/player/{playerId}":
    get:
      parameters:
      - name: playerId
        in: path
        description: player id to get
        required: true
        type: integer
      description: Get player by id
      tags:
      - player
      responses:
        '200':
          description: player with requested id
          schema:
            "$ref": "#/definitions/Player"
        '404':
          description: player was not found
      operationId: getPlayer
      produces:
      - application/json
      consumes:
      - application/json
    patch:
      parameters:
      - name: playerId
        in: path
        description: player id to get
        required: true
        type: integer
      - name: player
        in: body
        description: player info to update
        required: true
        schema:
          "$ref": "#/definitions/PlayerUpdInfo"
      description: Update player with specified id
      tags:
      - player
      responses:
        '200':
          description: ok
        '404':
          description: not found
      operationId: patchPlayer
      produces:
      - text/plain
      consumes:
      - application/json
      security:
      - JWT: []
    delete:
      parameters:
      - name: playerId
        in: path
        description: player id to delete
        required: true
        type: integer
      description: Delete player with specified id
      tags:
      - player
      responses:
        '200':
          description: ok
        '403':
          description: no enough rights
        '405':
          description: invalid input
      operationId: deletePlayer
      produces:
      - text/plain
      security:
      - JWT: []
  "/player":
    get:
      parameters: []
      description: Get all players collection
      tags:
      - player
      responses:
        '200':
          description: An array of players info
          schema:
            type: array
            items:
              "$ref": "#/definitions/Player.model"
      operationId: getPlayers
      produces:
      - application/json
    post:
      parameters:
      - name: player
        in: body
        description: player to add
        required: true
        schema:
          "$ref": "#/definitions/Player"
      description: Create new player in database
      tags:
      - player
      responses:
        '200':
          description: ok
        '403':
          description: no enough rights
        '405':
          description: invalid input
      operationId: createPlayer
      produces:
      - text/plain
      consumes:
      - application/json
      security:
      - JWT: []
  "/team/{teamId}/player":
    post:
      parameters:
      - name: teamId
        in: path
        description: team id
        required: true
        type: integer
      - name: playerId
        in: body
        description: player id to add
        required: true
        type: integer
      description: Add player (playerId) to team (teamId)
      tags:
      - team
      responses:
        '200':
          description: Team with requested id
        '403':
          description: No enough rights
        '404':
          description: Team not found
        '405':
          description: Invalid input
      operationId: addPlayerToTeam
      produces:
      - text/plain
      consumes:
      - text/plain
      security:
      - JWT: []
    delete:
      parameters:
      - name: teamId
        in: path
        description: team id to delete
        required: true
        type: integer
      - name: playerId
        in: body
        description: player id to add
        required: true
        type: integer
      description: Delete player from team
      tags:
      - team
      responses:
        '200':
          description: Team with requested id
        '403':
          description: No enough rights
        '404':
          description: Team not found
        '405':
          description: Invalid input
      operationId: deletePlayerFromTeam
      produces:
      - text/plain
      consumes:
      - text/plain
      security:
      - JWT: []
    get:
      parameters:
      - name: teamId
        in: path
        description: team id
        required: true
        type: integer
      description: Get all players from team
      tags:
      - team
      responses:
        '200':
          description: An array of players info
          schema:
            type: array
            items:
              "$ref": "#/definitions/Player.model"
        '404':
          description: team not found
      operationId: getPlayersFromTeam
      produces:
      - application/json
  "/team/{teamId}":
    get:
      parameters:
      - name: teamId
        in: path
        description: team id to get
        required: true
        type: integer
      description: Get team by id
      tags:
      - team
      responses:
        '200':
          description: team with requested id
          schema:
            "$ref": "#/definitions/Player"
        '404':
          description: team wasn't found
      operationId: getTeam
      produces:
      - application/json
    patch:
      parameters:
      - name: teamId
        in: path
        description: team id to set name
        required: true
        type: integer
      - name: teamName
        in: body
        description: new team name
        required: true
        type: string
      description: Update team name
      tags:
      - team
      responses:
        '200':
          description: Ok
        '403':
          description: No enough rights
        '404':
          description: Team not found
        '405':
          description: Invalid input
      operationId: updateTeamName
      produces:
      - text/plain
      consumes:
      - text/plain
      security:
      - JWT: []
    delete:
      parameters:
      - name: teamId
        in: path
        description: team id to delete
        required: true
        type: integer
      description: Delete team
      tags:
      - team
      responses:
        '200':
          description: Ok
        '403':
          description: No enough rights
        '404':
          description: Team not found
        '405':
          description: Invalid input
      operationId: deleteTeam
      produces:
      - text/plain
      security:
      - JWT: []
  "/team":
    get:
      parameters: []
      description: Get all teams
      tags:
      - team
      responses:
        '200':
          description: An array of players info
          schema:
            type: array
            items:
              "$ref": "#/definitions/Team.model"
      operationId: getTeams
      produces:
      - application/json
    post:
      parameters:
      - name: team
        in: body
        description: team to add
        required: true
        schema:
          "$ref": "#/definitions/Team"
      description: Create new team
      tags:
      - team
      responses:
        '200':
          description: Ok
        '403':
          description: No enough rights
        '405':
          description: Invalid input
      operationId: createTeam
      produces:
      - text/plain
      consumes:
      - application/json
      security:
      - JWT: []
  "/user/login":
    post:
      parameters:
      - name: loginInfo
        in: body
        description: user login info (login + password)
        required: true
        schema:
          "$ref": "#/definitions/UserLoginInfo"
      description: Login into system
      tags:
      - user
      responses:
        '200':
          description: ok
        '404':
          description: user not found
        '405':
          description: invalid input
      operationId: loginUser
      produces:
      - application/json
      consumes:
      - application/json
  "/user/logout":
    post:
      parameters: []
      description: Logout from system
      tags:
      - user
      responses:
        '200':
          description: ok
        '404':
          description: user not found
        '405':
          description: invalid input
      operationId: logoutUser
      produces:
      - text/plain
      security:
      - JWT: []
  "/user/{username}":
    get:
      parameters:
      - name: username
        in: query
        description: username of user to get
        required: true
        type: string
      description: Get user by username
      tags:
      - user
      responses:
        '200':
          description: ok
        '404':
          description: user not found
        '405':
          description: invalid input
      operationId: getUserByUsername
      produces:
      - text/plain
      consumes:
      - application/json
  "/user":
    put:
      parameters:
      - name: user
        in: body
        description: user info to update
        required: true
        schema:
          "$ref": "#/definitions/UserWithPass"
      description: Update user (can be perfomed only by user himself)
      tags:
      - user
      responses:
        '200':
          description: ok
        '403':
          description: no enough rights
        '405':
          description: invalid input
      operationId: updateUser
      produces:
      - text/plain
      consumes:
      - application/json
      security:
      - JWT: []
    post:
      parameters:
      - name: user
        in: body
        description: user info to update
        required: true
        schema:
          "$ref": "#/definitions/UserWithPass"
      description: Create new user
      tags:
      - user
      responses:
        '200':
          description: ok
        '405':
          description: invalid input
      operationId: createUser
      produces:
      - text/plain
      consumes:
      - application/json
definitions:
  UserLoginInfo:
    required:
    - login
    - password
    properties:
      login:
        type: string
        description: user login
      password:
        type: string
        description: user password
  User:
    required:
    - login
    - plevel
    properties:
      id:
        type: integer
        description: user id
      login:
        type: string
        description: user login
      plevel:
        type: integer
        description: user privilege level
  UserWithPass:
    required:
    - login
    - plevel
    - password
    properties:
      id:
        type: integer
        description: user id
      login:
        type: string
        description: user login
      plevel:
        type: integer
        description: user privilege level
      password:
        type: string
        description: user password
  Team:
    required:
    - name
    - owner_id
    properties:
      id:
        type: integer
        description: team id
      name:
        type: string
        description: team name
      owner_id:
        type: integer
        description: team owner id
  Player:
    required:
    - fname
    - lname
    - cntry
    - dob
    properties:
      id:
        type: integer
        description: player id
      fname:
        type: string
        description: player first name
      lname:
        type: string
        description: player last name
      cntry:
        type: string
        description: player country
      dob:
        type: string
        description: player date of birth
  PlayerUpdInfo:
    required: []
    properties:
      fname:
        type: string
        description: player first name
      lname:
        type: string
        description: player last name
      cntry:
        type: string
        description: player country
responses: {}
parameters: {}
tags:
- name: player
  description: Operations about player
- name: team
  description: Operations about team
- name: user
  description: Operations about user
