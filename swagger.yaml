swagger: "2.0"
info:
  description: "My hockey teams application"
  version: "1.0.0"
  title: "Hockey teams"
  termsOfService: "https://google.com"
  contact:
    email: "p_perestoronin@mail.ru"
host: "localhost"
basePath: "/api"
tags:
- name: "player"
  description: "Everything about players"
  externalDocs:
    description: "Find out more"
    url: "https://www.nhl.com"
- name: "team"
  description: "may contain players and is attached to user"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /player:
    post:
      tags:
      - "player"
      summary: "Add a new player to the global base of players"
      description: ""
      security:
        - cookieAuth: []
      operationId: "addPlayer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Player object that needs to be added to global base (only for admins)"
        required: true
        schema:
          $ref: "#/definitions/Player"
      responses:
        "403":
          description: "No enough rights"
        "405":
          description: "Invalid input"

    get:
      tags:
      - "player"
      summary: "Get all players from the global base of players"
      description: ""
      operationId: "getPlayers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Player"

  /player/{playerId}:
    get:
      tags:
      - "player"
      summary: "Find player by ID"
      description: "Returns a single player"
      operationId: "getPlayerById"
      produces:
      - "application/json"
      parameters:
      - name: "playerId"
        in: "path"
        description: "ID of player to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Player"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Player not found"

    patch:
      tags:
      - "player"
      summary: "Updates a player in the global base of players (only for admins)"
      description: ""
      security:
        - cookieAuth: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "playerId"
        in: "path"
        description: "ID of player that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Updated info of the player"
        required: true
        schema:
          $ref: "#/definitions/PlayerUpdInfo"
      responses:
        "200":
          description: "Player updated"
        "403":
          description: "No enough rights"
        "405":
          description: "Invalid input"

    delete:
      tags:
      - "player"
      summary: "Deletes a player"
      description: ""
      security:
        - cookieAuth: []
      operationId: "deletePlayer"
      produces:
      - "application/json"
      parameters:
      - name: "playerId"
        in: "path"
        description: "Player id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Player not found"

  /team:
    post:
      tags:
      - "team"
      summary: "Add a new team for user"
      description: ""
      operationId: "addTeam"
      security:
        - cookieAuth: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Player object that needs to be added to global base (only for admins)"
        required: true
        schema:
          $ref: "#/definitions/Player"
      responses:
        "405":
          description: "Invalid input"

    get:
      tags:
      - "team"
      summary: "Get all teams"
      description: ""
      operationId: "getTeams"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"

  /team/{teamId}:
    get:
      tags:
      - "team"
      summary: "Find team by ID"
      description: "Returns a single team"
      operationId: "getTeamById"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Player"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Team not found"

    patch:
      tags:
      - "team"
      summary: "Updates team name"
      description: ""
      security:
        - cookieAuth: []
      consumes:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Updated name of the team"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Name updated"
        "404":
          description: "Invalid id"
        "405":
          description: "Invalid name"

    delete:
      tags:
      - "team"
      summary: "Deletes team"
      description: ""
      security:
        - cookieAuth: []
      operationId: "deleteTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Team deleted"
        "400":
          description: "Invalid ID supplied"
        "403":
          description: "No access to team"

  /team/{teamId}/player:
    patch:
      tags:
      - "team"
      summary: "Add a new player to the team"
      description: ""
      operationId: "addPlayerToTeam"
      security:
        - cookieAuth: []
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "playerId"
        in: "body"
        description: "ID of player to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "player added"
        "404":
          description: "teamId not found"
        "405":
          description: "playerId not found"

    get:
      tags:
      - "team"
      summary: "Get all players from the team"
      description: ""
      operationId: "getPlayersFromTeam"
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Player"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      security:
        - cookieAuth: []
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            Set-Cookie:
              type: "string"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      security:
        - cookieAuth: []
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    #delete:
      #tags:
      #- "user"
      #summary: "Delete user"
      #description: "This can only be done by the logged in user."
      #operationId: "deleteUser"
      #produces:
      #- "application/json"
      #parameters:
      #- name: "username"
        #in: "path"
        #description: "The name that needs to be deleted"
        #required: true
        #type: "string"
      #responses:
        #"400":
          #description: "Invalid username supplied"
        #"404":
          #description: "User not found"


definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      plevel:
        type: "boolean"
        default: false

  Team:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      ownerId:
        type: "integer"
        format: "int64"

  Player:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      fname:
        type: "string"
      lname:
        type: "string"
      cntry:
        type: "string"
      dob:
        type: "string"
        format: "date-time"

  PlayerUpdInfo:
    type: "object"
    properties:
      fname:
        type: "string"
      lname:
        type: "string"
      cntry:
        type: "string"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

securityDefinitions:
  cookieAuth:
    type: "apiKey"
    in: "header"
    name: "cookie"


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
