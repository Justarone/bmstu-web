events {}


http {
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=all:32m max_size=1g;

    upstream backend {
        server app1 weight=2;
        server app2;
        server app3;
    }

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen 443 quic reuseport;
        server_name hockey.com;
        ssl_certificate     certs/hockey.com.crt;
        ssl_certificate_key certs/hockey.com.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        gzip on;
        gzip_comp_level 5;
        gzip_disable "msie6";
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        proxy_cache all;
        proxy_cache_min_uses 1;
        proxy_cache_valid 200 301 302 120m;
        proxy_cache_valid 404 1m;
        expires max;

        location = /check_http3 {
            return 200 "http3 on $hostname";
        }

        location /api/v1 {
            proxy_pass_header Server;
            proxy_no_cache 1;

            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            proxy_pass http://backend/api;
        }

        location /api/v2 {
            proxy_pass_header Server;
            proxy_no_cache 1;
            proxy_pass http://backend;
        }

        location / {
            root /static;
            try_files $uri $uri/ @admin_route;
        }

        location = /index.html {
            root /static;
            http2_push /static/img/hockey.jpg;
        }

        location /legacy {
            # можно проксировать на другой адрес, а можно отдать отдельный путь
            proxy_pass http://backend/old;
        }

        location /admin {
            return 301 http://localhost:5050;
        }

        location /status {
            stub_status;
        }
    }
}
