events {}

http {
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=default_cache:10m max_size=2g; #inactive=120m use_temp_path=off;
    upstream backend {
        server app1 weight=2;
        server app2;
        server app3;
    }
    
    upstream the_only_backend {
        server app1;
    }

    map $request_method $upstream_location {
        GET     backend;
        default the_only_backend;
    }

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen 443 quic reuseport;
        server_name hockey.com;
        ssl_certificate     certs/hockey.com.crt;
        ssl_certificate_key certs/hockey.com.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        gzip on;
        gzip_comp_level 5;
        gzip_disable "msie6";
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        proxy_ignore_headers Cache-Control;
        proxy_hide_header Cache-Control;

        proxy_cache_key $scheme$request_method$host$request_uri;

        proxy_cache default_cache;
        proxy_cache_methods GET;
        proxy_cache_min_uses 2;
        proxy_cache_valid 200 301 302 120m;
        proxy_cache_valid 404 1m;

        location /api/v1 {
            proxy_pass_header Server;
            proxy_no_cache 1;

            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            proxy_pass http://$upstream_location;
        }

        location = /api/v1 {
            proxy_pass http://the_only_backend/api/swagger;
        }

        location = /api/v1/ { # пусть тоже будет?
            proxy_pass http://the_only_backend/api/swagger;
        }

        location /api/swagger { # статика сваггера
            proxy_pass http://the_only_backend/api/swagger;
        }

        location / {
            root /static;
        }

        location = /index.html {
            root /static;
            http2_push /static/img/hockey.jpg;
        }

        location /legacy {
            # можно проксировать на другой адрес, а можно отдать отдельный путь
            proxy_pass http://backend/old;
        }

        location /test {
            return 301 https://localhost;
        }

        location /admin {
            return 301 http://localhost:5050;
        }

        location /status {
            stub_status;
        }
    }
}
